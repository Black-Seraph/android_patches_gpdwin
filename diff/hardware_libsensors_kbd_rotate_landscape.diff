diff --git a/kbdsensor.cpp b/kbdsensor.cpp
index 79864f1..18906cb 100644
--- a/kbdsensor.cpp
+++ b/kbdsensor.cpp
@@ -87,7 +87,7 @@ struct SensorPollContext : SensorFd<sensors_poll_device_1> {
 };
 
 SensorPollContext::SensorPollContext(const struct hw_module_t *module, struct hw_device_t **device)
-      : SensorFd<sensors_poll_device_1>(module, device), enabled(false), rotation(ROT_0), ktype(KeysType)
+      : SensorFd<sensors_poll_device_1>(module, device), enabled(false), rotation(ROT_90), ktype(KeysType)
 {
 	common.close = poll_close;
 	activate     = poll_activate;
@@ -222,78 +222,13 @@ int SensorPollContext::doPoll(sensors_event_t *data, int count)
 	if (!isValid())
 		return 0;
 
-	int *keys = ktype->keys;
-	while (int pollres = ::poll(&pfd, 1, -1)) {
-		if (pollres < 0) {
-			ALOGE("%s: poll %d error: %s", __FUNCTION__, pfd.fd, strerror(errno));
-			break;
-		}
-		if (!(pfd.revents & POLLIN)) {
-			ALOGW("%s: ignore revents %d", __FUNCTION__, pfd.revents);
-			continue;
-		}
-
-		struct input_event iev;
-		size_t res = ::read(pfd.fd, &iev, sizeof(iev));
-		if (res < sizeof(iev)) {
-			ALOGW("insufficient input data(%zu)? fd=%d", res, pfd.fd);
-			continue;
-		}
-		ALOGV("type=%d scancode=%d value=%d from fd=%d", iev.type, iev.code, iev.value, pfd.fd);
-		if (iev.type == keys[0]) {
-			int rot;
-			int input = (keys[0] == EV_MSC) ? iev.value : iev.code;
-			if (input == keys[1])
-				rot = ROT_0;
-			else if (input == keys[2])
-				rot = ROT_90;
-			else if (input == keys[3])
-				rot = ROT_180;
-			else if (input == keys[4])
-				rot = ROT_270;
-			else if (input == keys[5] || input == keys[6])
-				rot = rotation;
-			else
-				rot = -1;
-
-			if (rot >= 0) {
-				if (rot != rotation) {
-					ALOGI("orientation changed from %d to %d", rotation * 90, rot * 90);
-					rotation = rot;
-				}
-				if (enabled && count > 0)
-					break;
-			}
-		} else if (iev.type == EV_KEY) {
-			if (iev.code == keys[1] && iev.value) {
-				if (rotation == ROT_270)
-					rotation = ROT_0;
-				else
-					rotation++;
-			}
-			if (iev.code == keys[2] && iev.value) {
-				if (rotation == ROT_0)
-					rotation = ROT_270;
-				else
-					rotation--;
-			}
-			break;
-		} else if (iev.type == EV_SW && iev.code == SW_TABLET_MODE) {
-			if (!iev.value)
-				rotation = ROT_0;
-			else if (rotation == ROT_0)
-				rotation = ROT_90;
-			break;
-		}
-	}
-
 	int cnt;
 	struct timespec t = { 0, 0 };
 	data[0] = orients[rotation];
 	clock_gettime(CLOCK_MONOTONIC, &t);
 	data[0].timestamp = int64_t(t.tv_sec) * 1000000000LL + t.tv_nsec;
 	struct timespec delay = { 0, static_cast<long>(sampling_period_ns) };
-	for (cnt = 1; !nanosleep(&delay, 0) && cnt < keys[7] && cnt < count; ++cnt) {
+	for (cnt = 1; !nanosleep(&delay, 0) && cnt < count; ++cnt) {
 		data[cnt] = data[cnt - 1];
 		data[cnt].timestamp += sampling_period_ns;
 	}
